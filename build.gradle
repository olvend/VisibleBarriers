buildscript {
    repositories {
        maven { url 'http://files.minecraftforge.net/maven' }
        maven { url 'https://repo.spongepowered.org/maven' }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1.3'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

sourceCompatibility = targetCompatibility = 1.8

minecraft {
    version = "${project.loader_version}-${project.minecraft_version}"
    runDir = 'run'
    mappings = 'stable_22'
    makeObfSourceJar = false

    ['mod_id', 'mod_name', 'mod_version', 'accepted_minecraft_versions'].each { property ->
        replace "@${property.toUpperCase()}@", project.hasProperty(property) ? project[property] : null
    }
}

mixin {
    add sourceSets.main, "${project.mod_id}.refmap.json"
}

configurations {
    embed
    compile.extendsFrom(embed)
}

repositories {
    maven { url 'https://repo.spongepowered.org/maven/' }
}

dependencies {
    embed project(':compat_1_9')
    embed('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        transitive = false
    }
}

processResources {
    def propertyMap = (file('src/main/resources/mcmod.info').text =~ /\$\{([\w.]+)}/)
            .collect { it[1] }
            .unique()
            .collectEntries { [(it): project.hasProperty(it) ? project[it] : it] }

    inputs.properties propertyMap

    filesMatching('mcmod.info') {
        expand propertyMap
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    dependsOn configurations.embed, ':compat_1_9:build'

    manifest.attributes(
            'TweakOrder': 0,
            'ModSide': 'CLIENT',
            'MixinConfigs': "${project.mod_id}.mixins.json",
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'ForceLoadAsMod': true
    )

    from {
        configurations.embed.collect { zipTree(it) }
    } {
        exclude 'META-INF/*', 'LICENSE.txt', 'dummyThing'
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
